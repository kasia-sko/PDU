mutate(unormowana_temp = (mean_temp_year - minimum)/(maksimum - minimum))
pogodaIndeks
write.csv(pogodaIndeks, "C:\\Users\\Kasia\\Desktop\\PDU\\PracaDomowa2\\aplikcja1\\pogodaIndeks")
# test czy średnie liczone po miesiącach są takie same jak po średnich rocznych
# test <- DanePogodowe %>%
#   mutate(year = strftime(time, "%Y"),
#          month = strftime(time, "%m")) %>%
#   inner_join(NazwyId, by = c("location_id")) %>%
#   group_by(location_id, Country.name) %>%
#   summarise(mean_monthly_temp = mean(temperature_2m_mean...C.), monthly_min_temp = min(temperature_2m_min...C.),
#             monthly_max_temp = max(temperature_2m_max...C.), monthly_amplitude = monthly_max_temp - monthly_min_temp,
#             montly_precipitate_sum = (sum(rain_sum..mm., na.rm = TRUE) + sum(snowfall_sum..cm., na.rm = TRUE))/10,
#             mean_monthly_dayligth_duration = mean(daylight_duration..s.)/3600,  mean_monthly_sunshine_duration = mean(sunshine_duration..s.)/3600) %>%
#   as.data.frame()
# head(test)
library(ggplot2)
library(plotly)
# bez krzywej
ggplot(pogodaIndeks, aes(x = LadderScore, y = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
labs(title = "ZALEŻNOŚĆ POGODY OD WSPÓŁCZYNNIKA SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Srednia roczna temperatura")
# bez krzywej
ggplot(pogodaIndeks, aes(x = LadderScore, y = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
labs(title = "ZALEŻNOŚĆ POGODY OD WSPÓŁCZYNNIKA SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Średnia roczna temperatura") +
theme(plot.title = element_text(hjust = 0.5))
# bez krzywej
ggplot(pogodaIndeks, aes(x = LadderScore, y = year_mean_sunshine_duration, color = Continents, shape = Continents)) +
geom_point() +
labs(title = "ZALEŻNOŚĆ POGODY OD WSPÓŁCZYNNIKA SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Średnia ilość godzin słonecznych")+
theme(plot.title = element_text(hjust = 0.5))
# ok wykresy
# mean temp
# krzywa naj dopasowania
ggplot(pogodaIndeks, aes(x = LadderScore, y = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
geom_smooth(aes(group = 1), method = "lm", se = FALSE, color = "black", lwd = 0.2) +
labs(title = "ZALEŻNOŚĆ TEMPERATURY OD WSPÓŁCZYNNIKA SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Srednia roczna temperatura")+
theme(plot.title = element_text(hjust = 0.5))
# bez krzywej
ggplot(pogodaIndeks, aes(x = LadderScore, y = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
labs(title = "ZALEŻNOŚĆ TEMPERATURY OD WSPÓŁCZYNNIKA SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Średnia roczna temperatura") +
theme(plot.title = element_text(hjust = 0.5))
# bez krzywej
ggplot(pogodaIndeks, aes(x = LadderScore, y = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
labs(title = "ZALEŻNOŚĆ TEMPERATURY OD INDEKSU SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Średnia roczna temperatura") +
theme(plot.title = element_text(hjust = 0.5))
# bez krzywej
ggplot(pogodaIndeks, aes(x = LadderScore, y = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
labs(title = "ZALEŻNOŚĆ TEMPERATURY OD INDEKSU SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Średnia roczna temperatura") +
theme(plot.title = element_text(hjust = 0.5))
# bez krzywej
ggplot(pogodaIndeks, aes(x = LadderScore, y = year_mean_sunshine_duration, color = Continents, shape = Continents)) +
geom_point() +
labs(title = "ZALEŻNOŚĆ GODZIN SŁONECZNYCH OD INDEKSU SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Średnia ilość godzin słonecznych")+
theme(plot.title = element_text(hjust = 0.5))
# słońce
# krzywa naj dopasowania
ggplot(pogodaIndeks, aes(x = LadderScore, y = year_mean_sunshine_duration, color = Continents, shape = Continents)) +
geom_point() +
geom_smooth(aes(group = 1), method = "lm", se = FALSE, color = "black", lwd = 0.2) +
labs(title = "ZALEŻNOŚĆ GODZIN SŁONECZNYCH OD INDEKSU SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Średnia ilość godzin słonecznych")+
theme(plot.title = element_text(hjust = 0.5))
# ok wykresy
# mean temp
# krzywa naj dopasowania
ggplot(pogodaIndeks, aes(x = LadderScore, y = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
geom_smooth(aes(group = 1), method = "lm", se = FALSE, color = "black", lwd = 0.2) +
labs(title = "ZALEŻNOŚĆ TEMPERATURY OD INDEKSU SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Srednia roczna temperatura")+
theme(plot.title = element_text(hjust = 0.5))
# ok wykresy
# mean temp
# krzywa naj dopasowania
ggplot(pogodaIndeks, aes(x = LadderScore, y = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
geom_smooth(aes(group = 1), method = "lm", se = FALSE, color = "black", lwd = 0.2) +
labs(title = "ZALEŻNOŚĆ TEMPERATURY OD INDEKSU SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Srednia roczna temperatura")+
theme(plot.title = element_text(hjust = 0.5))
library(shiny)
library(plotly)
library(ggplot2)
pogodaIndeksShiny <- read.csv("C:\\Users\\Kasia\\Desktop\\PDU\\PracaDomowa2\\aplikcja1\\pogodaIndeks")
pogodaIndeksShiny
choices <- setNames(names(pogodaIndeksShiny),
c("X", "Id kraju", "Nazwa kraju",
"Średnia roczna temperatura", "Średnia temperatura w najcieplejszym miesiącu", "Średnia temperatura w najzminiejszym miesiącu",
"Największa różnica temperatur", "Maksymalna temperatura", "Minimalna temperatura",
"Roczna suma opadów", "Średnia długość dnia", "Średnia ilość godzin słonecznych",
"Współczynnik szczęścia", "Kontynent"))
filtered_choices <- choices[c(4,5,6,7,8,9,10,12)]
ui <- fluidPage(
tags$head(tags$style(HTML("
#title {
text-align: center;
}
"))),
div(id = "title", titlePanel("ZALEŻNOŚĆ POGODY OD WSPÓŁCZYNNIKA SZCZĘŚCIA")),
br(),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "yvar",
label = "Wybierz wartość na osi Y:",
#choices = names(pogodaIndeksShiny),
choices = filtered_choices, #numery ktore chcemy:
selected = "mean_temp_year"
),
#textOutput("correlation_text")
htmlOutput("correlation_text")
),
mainPanel(
plotlyOutput("wykres")
)
)
)
server <- function(input, output) {
output$wykres <- renderPlotly({
yvar_label <- names(filtered_choices)[filtered_choices == input$yvar]
p2 <- plot_ly(data = pogodaIndeksShiny,
y = as.formula(paste0("~`", input$yvar, "`")),
x = ~LadderScore,
type = 'scatter',
mode = 'markers',
color = ~Continents,
text = ~paste('Kraj:', country_name, '<br>LadderScore:', round(LadderScore, digits = 2), '<br>', input$yvar, ':', round(get(input$yvar), digits = 2)),
hoverinfo = 'text') %>%
layout(
yaxis = list(title = yvar_label),
xaxis = list(title = 'Indeks szczęścia'),
width = 750,
height = 590
) %>%
config(
displayModeBar = TRUE,
responsive = TRUE
)
p2  # Zwrócenie wykresu
})
output$correlation_text <- renderText({
yvar_data <- pogodaIndeksShiny[[input$yvar]]
cor_value <- cor(pogodaIndeksShiny$LadderScore, yvar_data, use = "complete.obs")
#paste("Współczynnik korelacji między LadderScore a", input$yvar, "wynosi:", round(cor_value, 2))
cor_strength <- ifelse(abs(cor_value) < 0.2, "nikła",
ifelse(abs(cor_value) < 0.4, "niska",
ifelse(abs(cor_value) < 0.6, "umiarkowana",
ifelse(abs(cor_value) < 0.8, "wysoka", "bardzo wysoka"))))
HTML(paste("<div style='font-size: 18px; font-weight: bold; color: #2C3E50;'>",
"Współczynnik korelacji wynosi:", round(cor_value, 2),
"<br> Siła korelacji: <span style='color:#E74C3C;'>", cor_strength, "</span>",
"</div>"))
})
}
shinyApp(ui, server)
migracje <- read.csv("migracje.csv", fileEncoding = "Windows-1250")
migracje
nazwyKrajow <- read.csv("countries.csv")
head(nazwyKrajow,20)
nazwyKrajow$pl
srednie_migracje <- migracje %>%
group_by(Nazwa) %>%
summarise(srednia_emigracja = mean(c(EMI16, EMI17, EMI18, EMI19,EMI20, EMI21, EMI22), na.rm = TRUE),
srednie_saldo = mean(c(SALDO16,SALDO17, SALDO18, SALDO19, SALDO20, SALDO21, SALDO22), na.rm = TRUE))%>% as.data.frame()
srednie_migracje
migracje_pogodowe <- srednie_migracje %>%
inner_join(pogodaIndeks, by = c("Nazwa" = "country_name"))
head(migracje_pogodowe)
#przedzialy temperatury
migracje_pogodowe$mean_temp_category <- cut(migracje_pogodowe$mean_temp_year,
breaks = c(-10, -5, 0, 5, 10, 15, 20, 25, 30, 35, 40),
labels = c("-10- -5", "-5-0", "0-5", "5-10", "10-15", "15-20", "20-25", "25-30", "30-35", "35-40"))
# wczytujemy populacje
populacja <- read.csv("populacja.csv", row.names = NULL)
colnames(populacja)[1] <- "country_name"
populacja <- populacja[,c("country_name", "X2022")]
migracje_pogodowe <- populacja %>%
inner_join(migracje_pogodowe, by = c("country_name" = "Nazwa")) %>%
mutate(emigracje_per_1000 = srednia_emigracja / X2022 * 1000)
migracje_pogodowe
colnames(migracje_pogodowe)
# wykres na 1000 ludzi
ggplot(migracje_pogodowe, aes(x = mean_temp_category, y = emigracje_per_1000)) +
geom_bar(stat = "identity") +
labs(title = "ZALEŻNOŚĆ",
x = "średnia temperatura w ciągu roku",
y = "Ilość emigrantów / 1000") +
theme_minimal()
# wykres ilosci emigrujacych ludzi od temperatury
migracje_pogodowe11 <- migracje_pogodowe %>%
group_by(mean_temp_category) %>%
summarise(ilosc_ludzi_emi = sum(srednia_emigracja), ilosc_ludzi_saldo = sum(srednie_saldo)) %>% as.data.frame()
ggplot(migracje_pogodowe11, aes(x = mean_temp_category, y = ilosc_ludzi_emi)) +
geom_bar(stat = "identity") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "średnia temperatura w ciągu roku",
y = "Ilość emigrantów") +
theme_minimal()
ggplot(migracje_pogodowe11, aes(x = mean_temp_category, y = ilosc_ludzi_emi)) +
geom_bar(stat = "identity") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "średnia temperatura w ciągu roku",
y = "Ilość emigrantów")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(migracje_pogodowe11, aes(x = mean_temp_category, y = ilosc_ludzi_emi)) +
geom_bar(stat = "identity") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "średnia temperatura w ciągu roku",
y = "Ilość emigrantów")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(migracje_pogodowe11, aes(x = mean_temp_category, y = ilosc_ludzi_emi)) +
geom_bar(stat = "identity") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "średnia temperatura w ciągu roku",
y = "Ilość emigrantów")+
theme(plot.title = element_text(hjust = 0.5))
#log
ggplot(migracje_pogodowe, aes(x = srednia_emigracja, y = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
scale_x_log10() +
labs(x = "Srednia Emigracja (log scale)", y = "Mean Temperature Year", color = "Continents", shape = "Continents") +
theme_minimal()
correlation <- cor(migracje_pogodowe$srednia_emigracja, migracje_pogodowe$mean_temp_year)
correlation
ggplot(pogodaIndeks, aes(y = LadderScore, x = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
geom_smooth(aes(group = 1), method = "lm", se = FALSE, color = "black", lwd = 0.2) +
labs(title = "ZALEŻNOŚĆ TEMPERATURY OD INDEKSU SZCZĘŚCIA",
x = "Indeks szczęścia",
y = "Srednia roczna temperatura")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(pogodaIndeks, aes(y = LadderScore, x = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
geom_smooth(aes(group = 1), method = "lm", se = FALSE, color = "black", lwd = 0.2) +
labs(title = "ZALEŻNOŚĆ TEMPERATURY OD INDEKSU SZCZĘŚCIA",
y = "Indeks szczęścia",
x = "Srednia roczna temperatura")+
theme(plot.title = element_text(hjust = 0.5))
correlation <- cor(pogodaIndeks$LadderScore, pogodaIndeks$mean_temp_year)
correlation
correlation <- cor(pogodaIndeks$mean_temp_year,pogodaIndeks$LadderScore)
correlation
#log migracje
ggplot(migracje_pogodowe, aes(x = srednia_emigracja, y = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
scale_x_log10() +
labs(title = "ZALEŻNOŚĆ ŚREDNIEJ LICZBY EMIGRANTÓW OD TEMPERATURY",
x = "Średnia liczba emigrantów (skala logarytmiczna)",
y = "Średnia roczna temperatura",
color = "Continents",
shape = "Continents") +
theme(plot.title = element_text(hjust = 0.5))
#log migracje
ggplot(migracje_pogodowe, aes(y = srednia_emigracja, x = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
scale_x_log10() +
labs(title = "ZALEŻNOŚĆ ŚREDNIEJ LICZBY EMIGRANTÓW OD TEMPERATURY",
y = "Średnia liczba emigrantów (skala logarytmiczna)",
x = "Średnia roczna temperatura",
color = "Continents",
shape = "Continents") +
theme(plot.title = element_text(hjust = 0.5))
#log migracje
ggplot(migracje_pogodowe, aes(y = srednia_emigracja, x = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
scale_y_log10() +
labs(title = "ZALEŻNOŚĆ ŚREDNIEJ LICZBY EMIGRANTÓW OD TEMPERATURY",
y = "Średnia liczba emigrantów (skala logarytmiczna)",
x = "Średnia roczna temperatura",
color = "Continents",
shape = "Continents") +
theme(plot.title = element_text(hjust = 0.5))
correlation <- cor(migracje_pogodowe$srednia_emigracja, migracje_pogodowe$mean_temp_year)
correlation
ggplot(migracje_pogodowe11, aes(x = mean_temp_category, y = ilosc_ludzi_emi)) +
geom_bar(stat = "identity") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "średnia temperatura w ciągu roku",
y = "Ilość emigrantów")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(migracje_pogodowe11, aes(x = mean_temp_category, y = ilosc_ludzi_emi)) +
geom_bar(stat = "identity") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "średnia rocza temperatura",
y = "Ilość emigrantów")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(migracje_pogodowe11, aes(x = mean_temp_category, y = ilosc_ludzi_emi)) +
geom_bar(stat = "identity", fill = "saddlebrown") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "Średnia roczna temperatura",
y = "Ilość emigrantów") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(migracje_pogodowe11, aes(x = mean_temp_category, y = ilosc_ludzi_emi)) +
geom_bar(stat = "identity", fill = "#584B0C") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "Średnia roczna temperatura",
y = "Ilość emigrantów") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(migracje_pogodowe11, aes(x = mean_temp_category, y = ilosc_ludzi_emi)) +
geom_bar(stat = "identity", fill = "#4d2f02") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "Średnia roczna temperatura",
y = "Ilość emigrantów") +
theme(plot.title = element_text(hjust = 0.5))
# wykres na 1000 ludzi
ggplot(migracje_pogodowe, aes(x = mean_temp_category, y = emigracje_per_1000)) +
geom_bar(stat = "identity", fill = "#4d2f02") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW NA 1000 MIESZKAŃCÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "średnia roczna temperatura",
y = "Ilość emigrantów na 1000 mieszkańców") +
theme_minimal()
# wykres na 1000 ludzi
ggplot(migracje_pogodowe, aes(x = mean_temp_category, y = emigracje_per_1000)) +
geom_bar(stat = "identity", fill = "#4d2f02") +
labs(title = "ZALEŻNOŚĆ ILOŚCI EMIGRANTÓW NA 1000 MIESZKAŃCÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "średnia roczna temperatura",
y = "Ilość emigrantów na 1000 mieszkańców")+
theme(plot.title = element_text(hjust = 0.5))
ggplot(migracje_pogodowe11, aes(x = mean_temp_category, y = ilosc_ludzi_emi)) +
geom_bar(stat = "identity", fill = "#4d2f02") +
labs(title = "ZALEŻNOŚĆ LICZBY EMIGRANTÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "Średnia roczna temperatura",
y = "Liczba emigrantów") +
theme(plot.title = element_text(hjust = 0.5))
# wykres na 1000 ludzi
ggplot(migracje_pogodowe, aes(x = mean_temp_category, y = emigracje_per_1000)) +
geom_bar(stat = "identity", fill = "#4d2f02") +
labs(title = "ZALEŻNOŚĆ LICZBY EMIGRANTÓW NA 1000 MIESZKAŃCÓW OD TEMPERATURY W KRAJU DOCELOWYM",
x = "średnia roczna temperatura",
y = "Liczba emigrantów na 1000 mieszkańców")+
theme(plot.title = element_text(hjust = 0.5))
library(shiny)
library(plotly)
library(ggplot2)
pogodaIndeksShiny <- read.csv("C:\\Users\\Kasia\\Desktop\\PDU\\PracaDomowa2\\aplikcja1\\pogodaIndeks")
pogodaIndeksShiny
choices <- setNames(names(pogodaIndeksShiny),
c("X", "Id kraju", "Nazwa kraju",
"Średnia roczna temperatura", "Średnia temperatura w najcieplejszym miesiącu", "Średnia temperatura w najzminiejszym miesiącu",
"Największa różnica temperatur", "Maksymalna temperatura", "Minimalna temperatura",
"Roczna suma opadów", "Średnia długość dnia", "Średnia ilość godzin słonecznych",
"Współczynnik szczęścia", "Kontynent"))
filtered_choices <- choices[c(4,5,6,7,8,9,10,12)]
ui <- fluidPage(
tags$head(tags$style(HTML("
#title {
text-align: center;
}
"))),
div(id = "title", titlePanel("ZALEŻNOŚĆ POGODY OD WSPÓŁCZYNNIKA SZCZĘŚCIA")),
br(),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "yvar",
label = "Wybierz wartość na osi Y:",
#choices = names(pogodaIndeksShiny),
choices = filtered_choices, #numery ktore chcemy:
selected = "mean_temp_year"
),
#textOutput("correlation_text")
htmlOutput("correlation_text")
),
mainPanel(
plotlyOutput("wykres")
)
)
)
server <- function(input, output) {
output$wykres <- renderPlotly({
yvar_label <- names(filtered_choices)[filtered_choices == input$yvar]
p2 <- plot_ly(data = pogodaIndeksShiny,
x = as.formula(paste0("~`", input$yvar, "`")),
y = ~LadderScore,
type = 'scatter',
mode = 'markers',
color = ~Continents,
text = ~paste('Kraj:', country_name, '<br>LadderScore:', round(LadderScore, digits = 2), '<br>', input$yvar, ':', round(get(input$yvar), digits = 2)),
hoverinfo = 'text') %>%
layout(
xaxis = list(title = yvar_label),
yaxis = list(title = 'Indeks szczęścia'),
width = 750,
height = 590
) %>%
config(
displayModeBar = TRUE,
responsive = TRUE
)
p2  # Zwrócenie wykresu
})
output$correlation_text <- renderText({
yvar_data <- pogodaIndeksShiny[[input$yvar]]
cor_value <- cor(pogodaIndeksShiny$LadderScore, yvar_data, use = "complete.obs")
#paste("Współczynnik korelacji między LadderScore a", input$yvar, "wynosi:", round(cor_value, 2))
cor_strength <- ifelse(abs(cor_value) < 0.2, "nikła",
ifelse(abs(cor_value) < 0.4, "niska",
ifelse(abs(cor_value) < 0.6, "umiarkowana",
ifelse(abs(cor_value) < 0.8, "wysoka", "bardzo wysoka"))))
HTML(paste("<div style='font-size: 18px; font-weight: bold; color: #2C3E50;'>",
"Współczynnik korelacji wynosi:", round(cor_value, 2),
"<br> Siła korelacji: <span style='color:#E74C3C;'>", cor_strength, "</span>",
"</div>"))
})
}
shinyApp(ui, server)
library(shiny)
library(plotly)
library(ggplot2)
pogodaIndeksShiny <- read.csv("C:\\Users\\Kasia\\Desktop\\PDU\\PracaDomowa2\\aplikcja1\\pogodaIndeks")
pogodaIndeksShiny
choices <- setNames(names(pogodaIndeksShiny),
c("X", "Id kraju", "Nazwa kraju",
"Średnia roczna temperatura", "Średnia temperatura w najcieplejszym miesiącu", "Średnia temperatura w najzminiejszym miesiącu",
"Największa różnica temperatur", "Maksymalna temperatura", "Minimalna temperatura",
"Roczna suma opadów", "Średnia długość dnia", "Średnia ilość godzin słonecznych",
"Współczynnik szczęścia", "Kontynent"))
filtered_choices <- choices[c(4,5,6,7,8,9,10,12)]
ui <- fluidPage(
tags$head(tags$style(HTML("
#title {
text-align: center;
}
"))),
div(id = "title", titlePanel("ZALEŻNOŚĆ INDEKSU SZCZĘŚCIA OD POGODY")),
br(),
sidebarLayout(
sidebarPanel(
selectInput(
inputId = "yvar",
label = "Wybierz wartość na osi Y:",
#choices = names(pogodaIndeksShiny),
choices = filtered_choices, #numery ktore chcemy:
selected = "mean_temp_year"
),
#textOutput("correlation_text")
htmlOutput("correlation_text")
),
mainPanel(
plotlyOutput("wykres")
)
)
)
server <- function(input, output) {
output$wykres <- renderPlotly({
yvar_label <- names(filtered_choices)[filtered_choices == input$yvar]
p2 <- plot_ly(data = pogodaIndeksShiny,
x = as.formula(paste0("~`", input$yvar, "`")),
y = ~LadderScore,
type = 'scatter',
mode = 'markers',
color = ~Continents,
text = ~paste('Kraj:', country_name, '<br>LadderScore:', round(LadderScore, digits = 2), '<br>', input$yvar, ':', round(get(input$yvar), digits = 2)),
hoverinfo = 'text') %>%
layout(
xaxis = list(title = yvar_label),
yaxis = list(title = 'Indeks szczęścia'),
width = 750,
height = 590
) %>%
config(
displayModeBar = TRUE,
responsive = TRUE
)
p2  # Zwrócenie wykresu
})
output$correlation_text <- renderText({
yvar_data <- pogodaIndeksShiny[[input$yvar]]
cor_value <- cor(pogodaIndeksShiny$LadderScore, yvar_data, use = "complete.obs")
#paste("Współczynnik korelacji między LadderScore a", input$yvar, "wynosi:", round(cor_value, 2))
cor_strength <- ifelse(abs(cor_value) < 0.2, "nikła",
ifelse(abs(cor_value) < 0.4, "niska",
ifelse(abs(cor_value) < 0.6, "umiarkowana",
ifelse(abs(cor_value) < 0.8, "wysoka", "bardzo wysoka"))))
HTML(paste("<div style='font-size: 18px; font-weight: bold; color: #2C3E50;'>",
"Współczynnik korelacji wynosi:", round(cor_value, 2),
"<br> Siła korelacji: <span style='color:#E74C3C;'>", cor_strength, "</span>",
"</div>"))
})
}
shinyApp(ui, server)
ggplot(pogodaIndeks, aes(y = LadderScore, x = mean_temp_year, color = Continents, shape = Continents)) +
geom_point() +
geom_smooth(aes(group = 1), method = "lm", se = FALSE, color = "black", lwd = 0.2) +
labs(title = "ZALEŻNOŚĆ INDEKSU SZCZĘŚCIA OD TEMPERATURY",
y = "Indeks szczęścia",
x = "Srednia roczna temperatura")+
theme(plot.title = element_text(hjust = 0.5))
